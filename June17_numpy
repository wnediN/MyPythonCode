import numpy

# create a python list
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums)

# CREATE A NUMPY ARRAY
v = numpy.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(v)

# python lists can support scientific computation in a limited way
# but numpy is created for just scientific computation, and it has
# superior functions we can use for this purpose
# for instance, I can increment each array element by 5 by simply
# writing this one-line statement
vnew = v + 1
print(vnew)

# we can achieve the same result with the Python list, but we need
# to write a loop
nums_new = []
for num in nums:
    nums_new.append(num+5)
print(nums_new)

# let us do another example to show the difference in using a python
# list and a numpy array. Assume we have two arrays, and we would
# like to add their corresponding elements, called elementwise addition
u = numpy.array([-2, 0, 5, -4, 10])
v = numpy.array([12, 3, -2, 4, 25])
y = u + v
print(y)

# let us solve the same task by using only python lists
u = [-2, 0, 5, -4, 10]
v = [12, 3, -2, 4, 25]
y = u + v
print(y)

# indeed u + v does expanding the list of u with the elements of v
y = []
for i in range(len(u)):
    y.append(u[i] + v[i])
print(y)
# we can use zip() in the for loop to access the items from the two lists at the same cycle
y = []
for(u_num, v_num) in zip(u, v):
    y.append(u_num + v_num)
print(y)

import numpy as np
u = np.array([-2, 0, 5 -4, 10])
v = np.array([12, 3, -2, 4, 25])
y = u + v
print(y)

# numpy has many functions we can use
# for instance let us find the sum of the elemnts of a numpy array
import numpy as np
u = np.array([-2, 0, 5, -4, 10])
print(u)
u_sum = np.sum(u)
print(u_sum)
u_sum = u.sum()

# ACCESSING ELEMENTS OF A NUMPY ARRAY
# we use subscript notation
# u[k]
# gives us the element of array 'u' at the index 'k'. Indices start with 0 and
# increases 1 by 1

import numpy as np
u = np.array([-2, 0, 5, -4, 10])
print(u[0])
print(u[3])
print(u[-3])

# exercise
# write a program that finds the interval of 1s where each interval has at least two 1s
# for instance
# u = [0 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0]

import numpy as np
u = np.array(0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0)
u_len = len(u)

nregions = 0
k = 1
while k < u_len:
    if u[k] == 1 and u[k-1] == 1:
        nregions += 1
        # go to the index of next zero
        while u[k] == 1:
            k += 1
            continue
    k += 1
print(nregions)

# TWO DIMENSIONAL NUMPY ARRAYS (MATRICES)
A = np.array([[5, 0, -2, 3], [0, 3, -1, 7], [8, 0, 5, 1]])
print(A)

import numpy as np
M = np.array([
    [5, 0, -2, 3, 1, -4, 7, 0, 5, -1],
    [0, 3, -1, 7, 2, 8, -3, 4, 0, 9],
    [8, 0, 5, 1, -2, 3, 0, 7, -5, 2],
    [3, -1, 4, 6, 0, -2, 8, 5, 1, 0],
    [-2, 7, 0, 3, 9, -4, 1, 2, 6, -1],
    [0, 6, -3, 2, 4, 0, -5, 8, 7, 3],
    [1, -4, 6, 0, 2, -3, 9, 5, 0, 4],
    [7, 0, -1, 8, 3, 1, 0, -2, 5, 6]])
print(M[2:5, 1:3])
print(M[2:5, 4:9])
print(M[3:7, : ]) # all columns
print(M[2: , :3])

# let us print
nrows, ncols = M.shape
countneg = 0
for i in range(nrows):
    for j in range(ncols):
        if M[i, j] < 0:
            countneg += 1
print(countneg)
# print(M[i, j], sep=',|', end='')
# print(M.shape)

# we can achieve the same result in a single line using numpy
print((M < 0).sum())

# for explanation
A = np.array([
    [-2, 3, 0, 7, -5],
    [0, -2, 8, 5, 1],
    [9, -4, 1, 2, 6]])
print(A)

# let us get an array of boolean values
B = (A < 0)
print(B)

Bsum = B.sum()
print(Bsum)

sum = 0
for i in range(nrows):
    for j in range(ncols):
        if A[i, j] < 0:
            sum += A[i, j]
print(sum)
# let us print sum in single line using numpy
sum = A[A < 0].sum()
print(sum)

print(A)
print(A < 0 )
print(A[A < 0])
print(A[A < 0].sum())
